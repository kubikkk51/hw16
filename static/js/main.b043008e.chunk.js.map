{"version":3,"sources":["Components/Timer.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Timer","props","startTime","step","React","useState","time","setTime","timerOn","setTimeOn","useEffect","interval","setInterval","prevTime","console","log","Math","floor","clearInterval","slice","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLA4CeA,MAzCf,SAAeC,GACb,IAAQC,EAAoBD,EAApBC,UAAWC,EAASF,EAATE,KACnB,EAAwBC,IAAMC,SAASH,GAAvC,mBAAOI,EAAP,KAAaC,EAAb,KACA,EAA6BH,IAAMC,UAAS,GAA5C,mBAAOG,EAAP,KAAgBC,EAAhB,KAwBA,OAtBAL,IAAMM,WAAW,WACf,IAAIC,EAAW,KAiBf,OAfIH,EACFG,EAAWC,aAAY,WACrBL,GAAS,SAAAM,GACP,OAAIA,EAAW,GACbC,QAAQC,IAAR,iGAAiCC,KAAKC,MAAMJ,EAL/B,KAKb,SACQA,EANK,IAMwBV,IAErCM,GAAU,GACQP,QAGrB,KAEHgB,cAAcP,GAET,kBAAMO,cAAcP,MAE1B,CAACH,IAGF,gCACE,gCACE,kCAAQ,IAAMQ,KAAKC,MAAQX,EAAO,IAAS,KAAKa,OAAO,GAAvD,OACA,gCAAQ,IAAMH,KAAKC,MAAQX,EAAO,IAAQ,KAAMa,OAAO,QAEzD,wBAASC,QAAS,kBAAMX,GAAU,IAAlC,mBACA,wBAASW,QAAS,kBAAMX,GAAU,IAAlC,sBCxBSY,MATf,WAEE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,CAAOpB,UAAU,QAAQC,KAAK,SCIrBoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b043008e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction Timer(props) {\r\n  const { startTime, step } = props;\r\n  const [time, setTime] = React.useState(startTime)\r\n  const [timerOn, setTimeOn] = React.useState(true)\r\n\r\n  React.useEffect( () => {\r\n    let interval = null;\r\n    let stepInProgress = 1000;\r\n    if (timerOn) {\r\n      interval = setInterval(() => {\r\n        setTime( prevTime => {\r\n          if (prevTime > 0) {\r\n            console.log( `Залишилось часу: ${Math.floor(prevTime / stepInProgress)} sec` )\r\n            return (prevTime - (stepInProgress * step));\r\n          } else {\r\n            setTimeOn(false);\r\n            return prevTime = startTime;\r\n          }\r\n        } )\r\n      }, 1000)\r\n    } else {\r\n      clearInterval(interval)\r\n    }\r\n    return () => clearInterval(interval);\r\n\r\n  }, [timerOn])\r\n\r\n  return (\r\n    <div >\r\n      <div >\r\n        <span>{('0' + Math.floor( (time / 60000) % 60)).slice(-2)}:</span>\r\n        <span>{('0' + Math.floor( (time / 1000) % 60) ).slice(-2)}</span>\r\n      </div>\r\n      <button  onClick={() => setTimeOn(true)}>Start</button>\r\n      <button  onClick={() => setTimeOn(false)}>Stop</button>\r\n      \r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;","import React from 'react';\nimport './App.css';\nimport Timer from './Components/Timer'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Timer startTime='60000' step='1' />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}